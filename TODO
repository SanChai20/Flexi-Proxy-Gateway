1. key.pem文件添加权限并且不能放到当前工程目录里
3. 【可选】Ratelimit





当需要将 Fernet 生成的字节密钥（b'...' 格式）存储到环境变量时，必须通过安全的编码/解码流程转换。以下是具体实现方法，结合加密最佳实践：

🔑 正确转换密钥的步骤
Fernet 密钥是 32 字节的 URL-safe Base64 编码字符串，需按以下方式转换：

1. 生成并转换为字符串（存储到环境变量）

from cryptography.fernet import Fernet
import os

# 生成原始字节密钥
key_bytes = Fernet.generate_key()  # 输出: b'Xy...ZQ=='

# 安全转换为字符串（使用 ASCII 解码）
key_str = key_bytes.decode("ascii")  # 移除 b' 前缀，得到纯字符串

# 将 key_str 存入环境变量（实际部署时通过安全渠道设置）
# 例如: export SECRET_KEY="Xy...ZQ=="
2. 从环境变量恢复密钥（运行时使用）

# 从环境变量安全获取字符串
key_str = os.environ["SECRET_KEY"]

# 严格转回字节（必须使用 ASCII 编码）
key_bytes = key_str.encode("ascii")

# 初始化加密器
cipher = Fernet(key_bytes)
⚠️ 为什么必须这样操作？
Base64 安全性：Fernet 密钥本质是 URL-safe Base64 字符串，ASCII 编码可完美还原原始字节（cryptography.io）。
避免编码陷阱：若错误使用 utf-8 解码，可能导致密钥损坏。必须用 ascii（medium.com 的示例中密钥直接以 ASCII 字符串形式使用）。
硬编码风险：切勿在代码中写死密钥（如 key = b"Xy...ZQ=="），这会破坏安全链（medium.com 强调密钥应从安全位置动态获取）。
📌 完整实践示例

import os
from cryptography.fernet import Fernet

# --- 存储密钥到环境变量时（仅需执行一次） ---
# key_bytes = Fernet.generate_key()
# print("Set this in your env:", key_bytes.decode("ascii"))

# --- 运行时加载密钥 ---
key_str = os.environ["SECRET_KEY"]  # 从环境变量获取字符串
cipher = Fernet(key_str.encode("ascii"))  # 严格转回字节

# 加密示例
encrypted = cipher.encrypt(b"my_sensitive_data")
print("Encrypted:", encrypted.decode("ascii"))

# 解密示例
decrypted = cipher.decrypt(encrypted)
print("Decrypted:", decrypted.decode("utf-8"))